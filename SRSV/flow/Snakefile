# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

import os
ROOT = "/mnt/lustre/scratch/home/uvi/be/hde/m-seq_varcall"

configfile: os.path.join(ROOT, "flow", "config.json")
#REPS, SAMS = glob_wildcards("sims/{replicate}/output/bam/{sample, R\d+}.sam")
#REPS = config['replicate']
#REPS = config['replicate'].strip().split(' ')
REPS_ALL = glob_wildcards(os.path.join(ROOT, "sims/{rep_id}/output"))
#SAMS = glob_wildcards(os.path.join(ROOT, "sims/%s/output/bam/{sample}.sam" % REPS))
#SAMS_TUM = glob_wildcards(os.path.join(ROOT, "sims/%s/output/bam/{sample,R\d+}.sam" % REPS))
SAMPLES="R1 R2 R3 R4 R5 RN".split()

include: "bwa.smk"
include: "gatk.smk"
include: "multisnv.smk"
include: "vardict.smk"
include: "snooper.smk"
include: "caveman.smk"
include: "strelka.smk"
include: "bcftools.smk"
include: "somaticsniper.smk"
include: "jointsnvmix.smk"
include: "muse.smk"
include: "shimmer.smk"

# pseudo-rules to run variant callers
# -----------------------------------------------------------------------------
# Shimmer
rule run_shimmer:
    input:  "shimmer.vcf"
# MusE
rule run_muse:
    input:  "muse.vcf"
# JointSNVMix
rule run_jointsnvmix:
    input:  "jointsnvmix.vcf"
# SomaticSniper
rule run_somaticsniper:
    input:  "somaticsniper.vcf"
# Strelka1
rule run_strelka1:
    input:  "strelka1.vcf"
# Strelka2
rule run_strelka2:
    #input:  ["strelka/%s.vcf" % s for s in SAMPLES]
    input:  "strelka2.vcf"
# CaVEMan
rule run_caveman:
    input:  "caveman.vcf"
# MultiSNV
rule run_multisnv:
    input:  "multisnv.vcf"
    #input:  ["data/%s/multisnv.vcf" % rep for rep in REPS_ALL.rep_id]
# SNooPer
rule run_snooper:
    #input:  ["data/%s/snooper.vcf" % rep for rep in REPS_ALL.rep_id]
    input:  "snooper.vcf"
    #input:  "data/%s/snooper/out" % REPS
# VarDict
rule run_vardict:
    #input:  ["vardict.vcf" % rep for rep in REPS_ALL.rep_id]
    input:  "vardict.vcf"
    #input:  ["data/%s/%s.vardict.vcf" % (REPS, s) for s in SAMS_TUM.sample]
# MuTect1
rule run_mutect1:
    input:	"mutect1.vcf"
    #input:	["data/%s/%s.mutect1.vcf" % (REPS, s) for s in SAMS_TUM.sample]
    #input:  ["data/%s/mutect1.vcf" % rep for rep in REPS_ALL.rep_id]
# MuTect2
rule run_mutect2:
    #input:	["data/%s/%s.mutect2.vcf" % (REPS, s) for s in SAMS_TUM.sample]
    input:	"mutect2.vcf"
#------------------------------------------------------------------------------

# pseudo-rule to run read mapping
rule run_bwa:
    input:  ["%s.bam" % s for s in SAMPLES]

# prepare working directories for downstream analyses
rule prep_workdir:
  input:
    ref="sims/{replicate}/output/{reference}.fa",
    bed="sims/{replicate}/output/bed/N.cn.bed",
    sam="sims/{replicate}/output/bam"
  output:
    ref="data/{replicate}/{reference}.fa",
    bed="data/{replicate}/{reference}.bed"
  params:
    dir="data/{replicate}",
    samdir="data/{replicate}/sim" 
  shell:
    """
    # create working dir if necessary
    if [[ -d {params.dir} ]]; then
      mkdir -p {params.dir}
      mkdir {params.samdir}
    fi

    cp {input.ref} {output.ref}
    cp {input.bed} {output.bed}

    for fn in {input.sam}/*.sam; do
      ln -s $(readlink -e $fn) {params.samdir}/
    done
    """
