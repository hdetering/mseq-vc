# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

import os
ROOT = "/mnt/lustre/scratch/home/uvi/be/hde/m-seq_varcall"

configfile: "/home/uvi/be/hde/code/mseq-vc/RRSV/flow/config.json"
SAMPLES="R1 R2 R3 R4 R5 RN".split()

#include: "bwa.smk"
#include: "util.smk"
#include: "multisnv.smk"
#include: "mutect1.smk"
#include: "mutect2.smk"
#include: "vardict.smk"
#include: "snooper.smk"
#include: "caveman.smk"
#include: "strelka.smk"
include: "bcftools.smk"
#include: "somaticsniper.smk"
#include: "jointsnvmix.smk"
#include: "muse.smk"
#include: "shimmer.smk"
#include: "haplotypecaller.smk"
#include: "snv-ppilp.smk"
#include: "pyclone.smk"
#include: "muclone.smk"
include: "varscan.smk"
include: "neusomatic.smk"

# pseudo-rules to run variant callers
# -----------------------------------------------------------------------------
#------------------------------------------------------------------------------

# prepare working directories for downstream analyses
rule prep_workdir:
  input:
    ref="sims/{replicate}/output/{reference}.fa",
    bed="sims/{replicate}/output/bed/N.cn.bed",
    sam="sims/{replicate}/output/bam"
  output:
    ref="data/{replicate}/{reference}.fa",
    bed="data/{replicate}/{reference}.bed"
  params:
    dir="data/{replicate}",
    samdir="data/{replicate}/sim" 
  shell:
    """
    # create working dir if necessary
    if [[ -d {params.dir} ]]; then
      mkdir -p {params.dir}
      mkdir {params.samdir}
    fi

    cp {input.ref} {output.ref}
    cp {input.bed} {output.bed}

    for fn in {input.sam}/*.sam; do
      ln -s $(readlink -e $fn) {params.samdir}/
    done
    """
